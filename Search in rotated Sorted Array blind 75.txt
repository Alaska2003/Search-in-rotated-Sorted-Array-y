only for unique element presnt in an array class Solution {
public:
    int search(vector<int>& nums, int target) {
        int low=0,high=nums.size()-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target) return mid;

            if(nums[low]<=nums[mid]){
                if(nums[low]<=target  && target<=nums[mid]){
                    high=mid-1;
                }
                else{
                    low=mid+1;
                }
            }
            else{
                if(nums[mid]<=target && target<=nums[high]){
                    low=mid+1;
                }
                else{
                    high=mid-1;
                }
            }
        }
        return -1;
        
    }
};


Input: nums = [4,5,6,7,0,1,2], target = 0
Output: 4
Brute Force Approach:

Start from the beginning of the array and search linearly until you find the target element or reach the end of the array. Time Complexity: O(n) where n is the number of elements in the array.

Optimal Approach:

Utilize a modified binary search algorithm. Divide the search space into two halves and determine which half the target lies in based on the values at the endpoints and the midpoint. Adjust the search space accordingly until the target is found or the search space is exhausted. Time Complexity: O(log n) where n is the number of elements in the array.
